
// MySerialDlg.cpp : 구현 파일
//

#include "stdafx.h"
#include "MySerial.h"
#include "MySerialDlg.h"
#include "afxdialogex.h"

#include "SimpleSerial.h"


#ifdef _DEBUG
#define new DEBUG_NEW
#endif


// 응용 프로그램 정보에 사용되는 CAboutDlg 대화 상자입니다.

class CAboutDlg : public CDialogEx
{
public:
	CAboutDlg();

// 대화 상자 데이터입니다.
#ifdef AFX_DESIGN_TIME
	enum { IDD = IDD_ABOUTBOX };
#endif

	protected:
	virtual void DoDataExchange(CDataExchange* pDX);    // DDX/DDV 지원입니다.

// 구현입니다.
protected:
	DECLARE_MESSAGE_MAP()
};

CAboutDlg::CAboutDlg() : CDialogEx(IDD_ABOUTBOX)
{
}

void CAboutDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
}

BEGIN_MESSAGE_MAP(CAboutDlg, CDialogEx)
END_MESSAGE_MAP()


// CMySerialDlg 대화 상자



CMySerialDlg::CMySerialDlg(CWnd* pParent /*=NULL*/)
	: CDialogEx(IDD_MYSERIAL_DIALOG, pParent)
{
	m_hIcon = AfxGetApp()->LoadIcon(IDR_MAINFRAME);
	m_pSerial = NULL;
}

CMySerialDlg::~CMySerialDlg()
{
	if (m_pSerial)
	{
		delete m_pSerial;
		m_pSerial = NULL;
	}
}

void CMySerialDlg::DoDataExchange(CDataExchange* pDX)
{
	CDialogEx::DoDataExchange(pDX);
	DDX_Control(pDX, IDC_MESSAGE_LIST, m_editMsgList);
}

BEGIN_MESSAGE_MAP(CMySerialDlg, CDialogEx)
	ON_WM_SYSCOMMAND()
	ON_WM_PAINT()
	ON_WM_QUERYDRAGICON()
	ON_MESSAGE(WM_SERIAL_RECEIVED, wmSerialReceived)
	ON_BN_CLICKED(IDC_BTN_CLEAR, &CMySerialDlg::OnBnClickedBtnClear)
	ON_BN_CLICKED(IDC_CHECK_CONNECT, &CMySerialDlg::OnBnClickedCheckConnect)
	ON_BN_CLICKED(IDC_BTN_SEND, &CMySerialDlg::OnBnClickedBtnSend)
	ON_WM_TIMER()
END_MESSAGE_MAP()


// CMySerialDlg 메시지 처리기

BOOL CMySerialDlg::OnInitDialog()
{
	CDialogEx::OnInitDialog();

	// 시스템 메뉴에 "정보..." 메뉴 항목을 추가합니다.

	// IDM_ABOUTBOX는 시스템 명령 범위에 있어야 합니다.
	ASSERT((IDM_ABOUTBOX & 0xFFF0) == IDM_ABOUTBOX);
	ASSERT(IDM_ABOUTBOX < 0xF000);

	CMenu* pSysMenu = GetSystemMenu(FALSE);
	if (pSysMenu != NULL)
	{
		BOOL bNameValid;
		CString strAboutMenu;
		bNameValid = strAboutMenu.LoadString(IDS_ABOUTBOX);
		ASSERT(bNameValid);
		if (!strAboutMenu.IsEmpty())
		{
			pSysMenu->AppendMenu(MF_SEPARATOR);
			pSysMenu->AppendMenu(MF_STRING, IDM_ABOUTBOX, strAboutMenu);
		}
	}

	// 이 대화 상자의 아이콘을 설정합니다.  응용 프로그램의 주 창이 대화 상자가 아닐 경우에는
	//  프레임워크가 이 작업을 자동으로 수행합니다.
	SetIcon(m_hIcon, TRUE);			// 큰 아이콘을 설정합니다.
	SetIcon(m_hIcon, FALSE);		// 작은 아이콘을 설정합니다.

	// TODO: 여기에 추가 초기화 작업을 추가합니다.
	CString sComPort = _T("3"), sBaudRate = _T("9600"), sDataSize = _T("8");

	GetDlgItem(IDC_EDIT_COM_PORT)->SetWindowText(sComPort);
	GetDlgItem(IDC_EDIT_BAUD_RATE)->SetWindowText(sBaudRate);
	GetDlgItem(IDC_EDIT_DATA_SIZE)->SetWindowText(sDataSize);

	return TRUE;  // 포커스를 컨트롤에 설정하지 않으면 TRUE를 반환합니다.
}

void CMySerialDlg::OnSysCommand(UINT nID, LPARAM lParam)
{
	if ((nID & 0xFFF0) == IDM_ABOUTBOX)
	{
		CAboutDlg dlgAbout;
		dlgAbout.DoModal();
	}
	else
	{
		CDialogEx::OnSysCommand(nID, lParam);
	}
}

// 대화 상자에 최소화 단추를 추가할 경우 아이콘을 그리려면
//  아래 코드가 필요합니다.  문서/뷰 모델을 사용하는 MFC 응용 프로그램의 경우에는
//  프레임워크에서 이 작업을 자동으로 수행합니다.

void CMySerialDlg::OnPaint()
{
	if (IsIconic())
	{
		CPaintDC dc(this); // 그리기를 위한 디바이스 컨텍스트입니다.

		SendMessage(WM_ICONERASEBKGND, reinterpret_cast<WPARAM>(dc.GetSafeHdc()), 0);

		// 클라이언트 사각형에서 아이콘을 가운데에 맞춥니다.
		int cxIcon = GetSystemMetrics(SM_CXICON);
		int cyIcon = GetSystemMetrics(SM_CYICON);
		CRect rect;
		GetClientRect(&rect);
		int x = (rect.Width() - cxIcon + 1) / 2;
		int y = (rect.Height() - cyIcon + 1) / 2;

		// 아이콘을 그립니다.
		dc.DrawIcon(x, y, m_hIcon);
	}
	else
	{
		CDialogEx::OnPaint();
	}
}

// 사용자가 최소화된 창을 끄는 동안에 커서가 표시되도록 시스템에서
//  이 함수를 호출합니다.
HCURSOR CMySerialDlg::OnQueryDragIcon()
{
	return static_cast<HCURSOR>(m_hIcon);
}


LRESULT CMySerialDlg::wmSerialReceived(WPARAM wParam, LPARAM lParam)
{
	CString sReceived = (LPCTSTR)lParam;

	CString sDisp;
	GetDlgItem(IDC_MESSAGE_LIST)->GetWindowText(sDisp);
	sDisp += sReceived + _T("\r\n");
	GetDlgItem(IDC_MESSAGE_LIST)->SetWindowText(sDisp);

	return (LRESULT)1;
}


void CMySerialDlg::OnBnClickedBtnClear()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	if (::IsWindow(m_editMsgList.GetSafeHwnd()))
	{
		int nLen = m_editMsgList.GetWindowTextLength();
		m_editMsgList.SetSel(0, -1);
		m_editMsgList.Clear();
	}
}


void CMySerialDlg::OnBnClickedCheckConnect()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	CString sComPort, sBaudRate, sDataSize;
	BOOL bOn = ((CButton*)GetDlgItem(IDC_CHECK_CONNECT))->GetCheck();

	if (bOn)
	{
		GetDlgItem(IDC_EDIT_COM_PORT)->GetWindowText(sComPort);
		GetDlgItem(IDC_EDIT_BAUD_RATE)->GetWindowText(sBaudRate);
		GetDlgItem(IDC_EDIT_DATA_SIZE)->GetWindowText(sDataSize);

		if (!m_pSerial)
			m_pSerial = new CSimpleSerial(this, (BYTE)_tstoi(sComPort), (DWORD)_tstoi(sBaudRate), (BYTE)_tstoi(sDataSize));
	}
	else
	{
		if (m_pSerial)
		{
			delete m_pSerial;
			m_pSerial = NULL;
		}
	}
}


void CMySerialDlg::OnBnClickedBtnSend()
{
	// TODO: 여기에 컨트롤 알림 처리기 코드를 추가합니다.
	CString sMsg;
	GetDlgItem(IDC_TXT_MESSAGE)->GetWindowText(sMsg);
	if (!sMsg.IsEmpty())
	{
		if (m_pSerial)
		{
			m_pSerial->Send(sMsg);
		}
	}
}


void CMySerialDlg::OnTimer(UINT_PTR nIDEvent)
{
	// TODO: 여기에 메시지 처리기 코드를 추가 및/또는 기본값을 호출합니다.
	switch (nIDEvent)
	{
	case 0:
		KillTimer(0);
		DispSerialStatus();
		SetTimer(0, 300, NULL);
		break;
	default:
		break;
	}

	CDialogEx::OnTimer(nIDEvent);
}

void CMySerialDlg::DispSerialStatus()
{
	if (m_pSerial)
	{
		BOOL bOn = ((CButton*)GetDlgItem(IDC_CHECK_CONNECT))->GetCheck();
		if (m_pSerial->IsConnected())
		{
			if (!bOn)
				((CButton*)GetDlgItem(IDC_CHECK_CONNECT))->SetCheck(TRUE);
		}
		else
		{
			if (bOn)
				((CButton*)GetDlgItem(IDC_CHECK_CONNECT))->SetCheck(FALSE);
		}
	}
}